angular.module("JoeApp",["ngRoute","ngAnimate","appRoutes","MainCtrl","FrameCtrl","ProjectCtrl"]),angular.module("appRoutes",[]).config(["$routeProvider","$locationProvider",function(e,t){e.when("/",{templateUrl:"views/cover.html",controller:"MainController"}).when("/about",{templateUrl:"views/home.html",controller:"MainController"}).when("/connect",{templateUrl:"views/contact.html",controller:"MainController"}).when("/projects",{templateUrl:"views/projects.html",controller:"ProjectController"}).otherwise({redirectTo:"/"}),t.html5Mode({enabled:!0,requireBase:!1})}]),function(e,t,a,o,n,r,i){e.GoogleAnalyticsObject=n,e[n]=e[n]||function(){(e[n].q=e[n].q||[]).push(arguments)},e[n].l=1*new Date,r=t.createElement(a),i=t.getElementsByTagName(a)[0],r.async=1,r.src=o,i.parentNode.insertBefore(r,i)}(window,document,"script","//www.google-analytics.com/analytics.js","ga"),ga("create","UA-56562247-1","auto"),ga("send","pageview"),angular.module("FrameCtrl",[]).controller("FrameController",["$scope","$location","$rootScope","$window",function(e,t,a,o){a.aboutPage="/about"==t.path(),a.connectPage="/connect"==t.path(),a.projectPage="/projects"==t.path(),a.resumePage="/resume"==t.path(),a.$watch(function(){return t.path()},function(e,o){e!==o&&(a.aboutPage="/about"==t.path(),a.connectPage="/connect"==t.path(),a.projectPage="/projects"==t.path(),a.resumePage="/resume"==t.path())}),a.on=!1,e.$on("$viewContentLoaded",function(){o.ga("send","pageview",{page:t.path()})})}]),angular.module("MainCtrl",[]).controller("MainController",["$rootScope","$scope","$location","$timeout",function(e,t,a,o){o(function(){e.on=!0},100),t.goToPage=function(e){window.open(e,"_blank")}}]),angular.module("ProjectCtrl",[]).controller("ProjectController",["$scope",function(e){e.projects=[{title:"OnTap",description:'IRC Bot coded in Ruby, with some dabbling in Docker. Used on the #hardorange IRC Channel. Used as a joke "reward" system on the channel.',imageURL:"/assets/BeerTap.jpg",link:"https://github.com/JoeParrinello/OnTap"},{title:"Java LongInteger ADT",description:"Created for CS 435 - Advanced Data Structure & Algorithm Design. Tasked with creating an abstract data type that can model numbers larger than the traditional int or double. The numbers were designed to be compared to numbers, basic arithmetic, and exponentiation. Had to be designed in a way where the number could be implemented with either a Singly Linked List, Doubly Linked List, or Array. Source code can not be put online due to restrictions placed by the instructor.",imageURL:"/assets/JavaClip.png",link:""},{title:"Java DES Cryptosystem",description:"Created for CS 408 - Cryptography & Internet Security. Created all the component parts for a naive DES cryptosystem. Unable to be posted online due to restrictions placed on the source code.",imageURL:"/assets/JavaClip.png",link:""},{title:"Jimmy Bob's Car-a-palooza",description:"This stemmed from a project for my Introductions to Database Class, CS431. The design specification was for a simple POS unit for a car dealership to handle customer sales. My friend Trevor and I took it a bit farther, and decided to implement some extra technologies for practice. The front end is written as a single page application in AngularJS, where the backend is a Laravel setup, using MySQL database.",imageURL:"/assets/JimmyBob.png",link:"https://github.com/tsums/CarSalesProject"},{title:"JDistributedWork",description:"Programmed using Java Sockets, Threading, and File IO, this was an attempt to recreate a distributed work applications, like BOINC, onto multiple machines. The idea was to make a framework where the input would be a java class file that would have a slice of work to be done, and a method to call when all the slices were complete. Found a wierd bug where I would never be reported the n-1th thread, where n was the number of cores reported on the system.",imageURL:"/assets/JavaClip.png",link:"https://github.com/HardOrange/JDistributedWork"},{title:"Chaotic Clementine",description:"An SMS based event planning app built on Google app Engine. Collaborated with Trevor Summerfield and Matt Lavine.",imageURL:"/assets/AppEngineClip.jpg",link:"https://github.com/HardOrange/ChaoticClementine"},{title:"CalculatePi",description:"A Java application that runs either with GUI or without to calculate the value of Pi using sums. This leverages concurrency in Java. This was one of the inspirations for JDistributedWork.",imageURL:"/assets/JavaClip.png",link:"https://github.com/Taevis662/CalculatePi"}],e.goToPage=function(e){""!==e.link&&window.open(e.link,"_newtab")}}]);